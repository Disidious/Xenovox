// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson834047cfDecodeGithubComDisidiousXenovoxStructs(in *jlexer.Lexer, out *ClientUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "Username":
			out.Username = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson834047cfEncodeGithubComDisidiousXenovoxStructs(out *jwriter.Writer, in ClientUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs(l, v)
}
func easyjson834047cfDecodeGithubComDisidiousXenovoxStructs1(in *jlexer.Lexer, out *ClientMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "senderId":
			out.SenderId = int(in.Int())
		case "receiverId":
			out.ReceiverId = int(in.Int())
		case "groupMessage":
			out.GroupMessage = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson834047cfEncodeGithubComDisidiousXenovoxStructs1(out *jwriter.Writer, in ClientMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"senderId\":"
		out.RawString(prefix)
		out.Int(int(in.SenderId))
	}
	{
		const prefix string = ",\"receiverId\":"
		out.RawString(prefix)
		out.Int(int(in.ReceiverId))
	}
	{
		const prefix string = ",\"groupMessage\":"
		out.RawString(prefix)
		out.Bool(bool(in.GroupMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs1(l, v)
}
func easyjson834047cfDecodeGithubComDisidiousXenovoxStructs2(in *jlexer.Lexer, out *ClientFriend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "picture":
			out.Picture = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson834047cfEncodeGithubComDisidiousXenovoxStructs2(out *jwriter.Writer, in ClientFriend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"picture\":"
		out.RawString(prefix)
		out.String(string(in.Picture))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientFriend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientFriend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson834047cfEncodeGithubComDisidiousXenovoxStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientFriend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientFriend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson834047cfDecodeGithubComDisidiousXenovoxStructs2(l, v)
}
